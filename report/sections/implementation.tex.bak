%! TEX root = ../report.tex

% A detailed account of the implementation and testing of your software
% Explain the conceptual structure of the algorithms.
% Also explain what data structures you used
    % how the algorithms were implemented
% What implementation decisions did you take, and why?
    % There is no need to list every little function and procedure and explain its working in elaborate detail; use your judgement on what is appropriate to include

\chapter{Implementation}\label{chp:impl}
\todo{Describe the basic packet-flow operation}

    \section{Interfaces}\label{sec:intf}
    To support the requirement of dynamic and interchangeable interfaces, an abstraction defining what a network interface should provide was developed, based loosely on the information provided by \texttt{netdevice(7)}. At the most basic level, it must be able to send and receive packets of some given protocol. Figure~\ref{fig:intf-struct} outlines the critical features of the interface structure. % chktex 36

    \begin{figure}[H]
        \begin{center}
            \begin{tabular}{c}
                \begin{lstlisting}[gobble=16]
                struct intf {
                    // Protocol used by interface
                    proto_t proto;

                    // Functions to send and recv packets
                    long (*send_frame)(struct frame *);
                    long (*recv_frame)(struct frame *);

                    // For allocating frame buffers
                    void *(*new_buffer)(struct intf *intf,
                                        size_t size);
                    void (*free_buffer)(struct intf *intf,
                                        void *buffer);
                };
                \end{lstlisting}
            \end{tabular}
        \end{center}
        \caption{Network interface definition}\label{fig:intf-struct}
    \end{figure}

    Function pointers are used for the member functions of an interface object, populated by the specific interface implementation at initialisation time. This approach provides most of the benefits of a `virtual function table' and `function overloading' that an object-oriented language would provide.

    There are other fields to the operation of an interface that aren't listed in figure~\ref{fig:intf-struct} including, but not limited to:
    {\setlength\multicolsep{0pt}%
    \begin{center}
        \begin{minipage}{0.9\columnwidth}
            \begin{multicols}{2}
                \begin{itemize}[noitemsep]
                    \item{interface name}
                    \item{threads}
                    \item{link layer address}
                    \item{IP addresses}
                \end{itemize}
            \end{multicols}
        \end{minipage}
    \end{center}
    \smallskip}

    An implementation of the interface struct provides functionality for the major components making up the interface.
    \begin{itemize}
        \item{\texttt{intf->recv\_frame} is an indefinitely blocking function call, much like \texttt{recv(2)} from the BSD socket API\@. Within the interface receive thread, this function is repeatedly called to wait for and retrieve incoming packets, allocate required buffer space for the payload and return them in the provided \texttt{frame} argument.} % chktex 36
        \item{\texttt{intf->send\_frame} is called at multiple points from within the network stack by processes attempting to dispatch populated packets. The implementation \textit{should} block if a packet cannot be sent immediately}
        \item{\texttt{intf->new\_buffer} and \texttt{intf->free\_buffer} are used internally within the network stack to allocate buffers for new packets. These are used in place of \texttt{malloc(3)} and \texttt{free(3)} to allow for interface implementations that use pre-allocated packet buffers.} % chktex 36
    \end{itemize}

    Currently the only interface implementation is a `raw socket' which exchanges ethernet frames through the standard \texttt{send(2)} and \texttt{recv(2)} socket system calls. Packets are dispatched via \texttt{sendto(2)} through into the lower parts of the kernel network stack. As every sent and received packet requires a system call, the overhead of constant context switching is detrimental to the performance of this method (see Section~\todo{Reference section about context switching}). % chktex 36

    Interfaces that operate on different packet levels, such as TUN devices which communicate at the IP layer, are accounted for by setting \texttt{intf->proto} to the relevant protocol, in the case of TUN that would be \texttt{PROTO\_IP}. As outgoing packets work their way down the protocol stack, a check is made at each layer to directly dispatch the frame to the interface when the protocol matches that of the relevant interface.

    \section{Frames}

    \todo{explain what a `frame' is an how it works}

    \section{Header Manipulation}
    One of the many advantages of using a low-level systems programming language like C is the ability to manipulate memory in very efficient ways. One primary example of how this was used is by treating raw blocks of memory as various packet headers. With zero overhead, C allows reading bytes directly out of a network interface and casting the data into the required struct without needing to copy any values. As a bonus, it simplifies concurrent use of the packet data due to it being immediately available and requiring no parsing or processing.

    A good example of this is checking for 802.1Q VLAN tags in ethernet frames. Initially the packet is taken as a \texttt{struct eth\_hdr} and the \texttt{ethertype} field is checked:- this defines the type of data stored within the packet. When the ethertype holds the value \texttt{0x08100}, the header should be interpreted differently as it has two extra fields totalling 4 extra bytes over the standard \texttt{struct eth\_hdr}.% chktex 29
    \begin{figure}[H]
        \begin{center}
            \begin{tabular}{c}
                \begin{lstlisting}[gobble=16]
                /* Ethernet header */
                struct eth_hdr {
                    eth_addr_t daddr;
                    eth_addr_t saddr;
                    uint16_t ethertype; // Payload type
                }__attribute((packed));
                \end{lstlisting}
                \\\\
                \begin{lstlisting}[gobble=16]
                /* Ethernet VLAN header */
                struct eth_hdr_vlan {
                    eth_addr_t daddr;
                    eth_addr_t saddr;
                    uint16_t tpid;      // Value 0x8100
                    uint16_t vlan;      // VLAN tag
                    uint16_t ethertype; // Payload type
                }__attribute((packed));
                \end{lstlisting}
            \end{tabular}
        \end{center}
        \caption{Ethernet and VLAN headers}\label{fig:eth_hdr_vlan}
    \end{figure}

    The headers defined above in~(\ref{fig:eth_hdr_vlan}) define the structure of the data before the packet payload starts. Two additional fields are inserted into the VLAN header, before the \texttt{ethertype} field but are still represented by the same underlying data. This concept is easier visualised with a side-by-side comparison in figure~\ref{fig:ethvlancmp}.

    \def\arraystretch{1.4}
    \begin{figure}[H]
        \fontsize{7pt}{7pt}
        \centering
        \begin{tikzpicture}[every node/.style={inner sep=0,outer sep=0}]
            \node [fill=green!20] (S1) {%
                \begin{tabular}{|c|c|c}
                    \hline
                    \multicolumn{3}{|c}{Source} \\
                    \hline
                    .. & ff & ff \\
                    \hline
                \end{tabular}
            };
            \node [fill=cyan!20, right =0pt of S1] (E1) {%
                \begin{tabular}{|c|c}
                \hline
                \multicolumn{2}{|c}{Ethtype} \\
                \hline
                ?? & ?? \\
                \hline
                \end{tabular}
            };
            \node [fill=gray!20, right =0pt of E1] (P1) {%
                \begin{tabular}{|c|c|c|}
                \hline
                \multicolumn{3}{|c|}{Payload} \\
                \hline
                xx & xx & ..\\
                \hline
                \end{tabular}
            };
            \node [fill=green!20, below =of S1, yshift=1em] (S2) {%
                \begin{tabular}{|c|c|c}
                \hline
                \multicolumn{3}{|c}{Source} \\
                \hline
                .. & ff & ff \\
                \hline
                \end{tabular}
            };
            \node [fill=magenta!20, right =0pt of S2] (I2) {%
                \begin{tabular}{|c|c|c|c}
                \hline
                \multicolumn{4}{|c}{802.1Q} \\
                \hline
                81 & 00 & vv & vv \\
                \hline
                \end{tabular}
            };
            \node [fill=cyan!20, right =0pt of I2] (E2) {%
                \begin{tabular}{|c|c}
                \hline
                \multicolumn{2}{|c}{Ethtype} \\
                \hline
                ?? & ?? \\
                \hline
                \end{tabular}
            };
            \node [fill=gray!20, right =0pt of E2] (P2) {%
                \begin{tabular}{|c|c|}
                \hline
                \multicolumn{2}{|c|}{Payload} \\
                \hline
                xx & ..\\
                \hline
                \end{tabular}
            };

            \draw [-] (E1.south west) -- (I2.north west);
            \draw [-] (E1.south west) -- (E2.north west);

        \end{tikzpicture}

        \caption{Ethernet and VLAN comparison}\label{fig:ethvlancmp}
    \end{figure}

    \section{Internet Protocol}
    IP is a relatively simple protocol, compared with TCP, primarily it provides addressing and routing of packets, as well as some other features that aren't too relevant in the scope of this project (see Section~\ref{sec:intro-ip}).

    Incoming packets containing IP payloads are first validated for corruption against their checksum alongside other sanity checks and invalid packets are discarded. The destination address on the packets is then compared with the list of defined interface addresses and is only passed for further processing if the destination matches a local interface address or is a broadcast address. Broadcast packets, with destination 255.255.255.255 or the net broadcast address, are used by many applications, for example DHCP\@.

    Sending packets out, in response, isn't as simple as adding the desired destination address and sending it. First a `route' to the destination host must be established so the packet is sent to a device that can pass it on.

        \subsection{Routing}

    \section{Address Resolution Protocol}
    In reality, IP packets cannot be magically `sent to their destination', instead the \textit{link layer} has to be informed to where it is sending the packet. To bridge this gap, ARP is used to resolve the hardware address belonging to the desired protocol address. In most cases ARP is used to identify the ethernet address of a given IPv4 address.

    % required to map ip addresses to hardware addresses
    Within the `neighbour' system, ARP is used for this hardware address lookup as packets are sent. In the first implementation, any sent packet requested the hardware address for the destination from the ARP cache and dispatched the packet to the interface itself. If the was a \textit{cache miss} then the outgoing packet would be dropped immediately and an ARP request for the required protocol address would be sent out instead.

    % async behaviour
    During the implementation of TCP handshakes, before any retransmissions were implemented, it became apparent that this was not sufficient as the initial SYN packet was often dropped, causing the connection from never actually being established.
    The improved replacement implementation handles ARP lookups and caching asynchronously. When a packet is passed to the `neighbour' system, an ARP lookup is performed as before. Provided fulfillment of the requested address, the packets is sent as normal. When a \textit{cache miss} occurs, an ARP request for the missing lookup is sent. Depending on the subsystem that tried to send the packet, one of two actions is performed:
    \begin{itemize}[noitemsep]
        \item{the thread is suspended awaiting the reply message, at which point the packet is sent.}
        \item{the packet is pushed into a queue to be later processed when the reply arrives.}
    \end{itemize}
    In either case, a timeout is set, by default it is 10 seconds, and the packet is dropped if the timeout expires before the reply arrives. If the thread was suspended, it is resumed and a `Host unreachable' error is returned to the sender using an ICMP message.

    % talk about the inet_sock struct, what it is and how it works
    \section{Sockets}
    There are many definitions of the term `socket'. One particular implementation of a socket used in this project is the \texttt{struct inet\_sock} which represents an internet `connection', whether that be an actually TCP connection or just a single packet exchange.

    This structure is crucial to identifying connections and packets belonging to the Internet Suite of protocols, primarily TCP and UDP\@. It holds source and destination IP addresses and the accompanying 16 bit \textit{port} values used by the protocols and most importantly the socket type, defined portably in \texttt{<sys/socket.h>}. The type value is important as it defines the protocol and therefore dictates what information is available in the struct.

    \begin{figure}[H]
        \begin{center}
            \begin{tabular}{c}
                \begin{lstlisting}[gobble=16]
                struct inet_sock {
                    addr_t locaddr;
                    addr_t remaddr;
                    uint16_t locport;
                    uint16_t remport;
                    uint8_t type;
                    struct intf *intf;
                    uint16_t flags;
                };
                \end{lstlisting}
            \end{tabular}
        \end{center}
        \caption{Internet Socket definition}\label{inet-sock-struct}
    \end{figure}

    The abbreviations \textit{loc} and \textit{rem} in this structure are shorthand for \textit{local} and \textit{remote} respectively.

    C defines that a type can be safely casted to any struct when the first element of the struct is of that type. This structure of nesting types is synonymous to inheritance in object-oriented programming languages. In the case of this project, an example of this being used is when storage of the type \texttt{struct~inet\_sock} and \texttt{inet\_sock->type~==~SOCK\_STREAM}, the element can be treated as \texttt{struct~tcp\_sock} through casting. This is typically used in the following use case:

    \begin{figure}[H]
        \centering
        \begin{tabular}{c}
            \begin{lstlisting}[gobble=12]
            struct inet_sock *inet;
            switch (inet->type) {
                case SOCK_STREAM: {
                    struct tcp_sock *sock =
                            (struct tcp_sock *) inet;
                    ...
                }
                default:
                    ...
            }
            \end{lstlisting}
        \end{tabular}
    \end{figure}

    Using this structure to generalise socket types is helpful as it allows all internet socket types to be grouped and handled together. It simplifies socket lookups for incoming packets as regardless of the protocol, the socket can always be compared for address and port values without needing any protocol-specific lookup.

    \section{TCP}
    %Whilst implementing TCP is a major component in the specification of this project, it took until over half-way through the main programming phase to actually start implementing TCP features. TCP requires a large underlying framework that is IP and its counterparts to function at all.
    Using Linux as an existing TCP implementation as a head-start, the first task was to accept valid TCP packets and process them. It was easiest to use incoming \texttt{SYN} packets and build a connection passively with a known good peer.

        \subsection{\Gls{segment} Arrives}
        Much of the information provided in RFC 793~\cite{rfc793} is background information about the basic operation of the protocol. The rest of the document details how incoming \glspl{segment} should be handled in the `\Gls{segment} Arrives' section. From this it is trivial to implement processes to establish and tear-down TCP connections, ignoring the transmission of any data payloads.

        As TCP packets arrive into the stack, the first stage is `demultiplexing', discussed in some detail in Section~\ref{sec:demultiplex}, comparing the two address/port pairs to the list of existing connections. Handling this lookup for existing connections is trivial by choosing the matching connection from the list. SYN packets indicating a new connection request, out-of-band packets such as those delayed from earlier closed connections and other unexpected packets have to be treated a little differently.

        The function \texttt{tcp\_seg\_arr} handles incoming \glspl{segment} and it expects the incoming \gls{segment} as well as the socket that the \gls{segment} belongs to, as arguments. To ensure the code is clean, maintainable and as flexible as possible, the TCP system does not know about IP addresses, instead it is abstracted out and relies on the underlying protocols to handle addressing. Unexpected incoming packets such as those previously mentioned have no existing socket so one must be allocated before passing it into TCP to handle the unknown connection. In some cases the newly allocated socket structure will be immediately deallocated after a reply packet is sent out, for example when sending \texttt{RST} packets for invalid connections or closed ports.

        Valid \glspl{segment} that arrive from established connections and carrying data, whether \textit{in-order} or not, are pushed in their entirety into the \textit{receive queue} in sequence order. Only \textit{in-order} \glspl{segment} will trigger transmission of \texttt{ACK} packets in response to receiving data. Out of order \glspl{segment} will still be retained for the future occasion where the missing data fills the gap in the sequence space, constructing one contiguous stream of data from \texttt{RCV.NXT}\@.

        Acknowledgement packets that are sent out calculate the \texttt{ACK} value from the largest contiguous \gls{segment} from \texttt{RCV.NXT}. \Glspl{segment} are checked sequentially, ensuring they are contiguous and ignoring any overlap. The point at which a gap is found in the sequence numbers, the successive sequence number of the last contiguous \gls{segment} in the queue is used as the acknowledgement number.

        The following example demonstrates this concept:

        \begin{center}
            \setlength{\tabcolsep}{2pt}
            \begin{tikzpicture}[
                node distance=0em,
                every node/.style={%
                    inner sep=2pt,
                    outer sep=0,
                    minimum height=3.3em,
                    fill=ForestGreen!50,
                }
            ]
                \fontsize{8pt}{8pt}
                \node                (1) {\begin{tabular}{lr} Seq & 250 \\ Len & 100 \end{tabular}};
                \node [right = of 1] (2) {\begin{tabular}{lr} Seq & 350 \\ Len &  50 \end{tabular}};
                \node [right = of 2] (3) {\begin{tabular}{lr} Seq & 400 \\ Len & 100 \end{tabular}};
                \node [right = of 3,fill=red!50] (4) {\begin{tabular}{c} \textit{Missing} \end{tabular}};
                \node [right = of 4] (5) {\begin{tabular}{lr} Seq & 550 \\ Len & 100 \end{tabular}};
                \draw [black!80,thick] (1.north west) -- (5.north east);
                \draw [black!80,thick] (1.south west) -- (5.south east);
                \draw [black!80,thick] (2.north west) -- (2.south west);
                \draw [black!80,thick] (3.north west) -- (3.south west);
                \draw [black!80,thick] (5.north west) -- (5.south west);
                \draw [black!80,thick] (5.north east) -- (5.south east);
                \draw [black!80,thick] ([yshift=1em]1.north west) -- ([yshift=-1em]1.south west);
                \node [above = of 1.north west,draw=none,fill=none, yshift=5pt] {\texttt{RCV.NXT}};
                \draw [dashed] ([yshift=1em]3.north east) -- ([yshift=-1em]3.south east);
                \node [above = of 3.north east,draw=none,fill=none, yshift=5pt] {\texttt{SEQ 499}};
            \end{tikzpicture}
        \end{center}

        Green boxes represent a \gls{segment} in the receive queue. Red boxes represent gaps in the sequence space. This demonstrates an idealised situation where \gls{segment} 550 arrives out-of-order resulting in a shortened contiguous sequence from bytes 250 to 499 inclusive, and an acknowledgement for 500 being sent. When the \gls{segment}(s) arrive to fill the missing bytes 500-549, an \texttt{ACK} for at least 550 would be sent. % chktex 8 chktex 36

        %\subsection{Retransmission}
        %%Retransmissions occurs for most sent \glspl{segment} in TCP, with the exception of \texttt{ACK} packets that carry no data.
        %Each and every \gls{segment} that passes out of the TCP layer, either containing data or control flags, is queued for retransmission. The exception to this is \texttt{ACK} packets that carry no data as there is no response to mark them as `received'. As well as pushing the \gls{segment} into the queue, the retransmission

        \subsection{Concurrency}
        % mostly in user functions
        % waiting for things to happen such as connect, reply ACK, etc
        % consists of pthread_cond

    \section{Socket API}
        \subsection{Netstack API}
        % TCP user functions join together the internal tcp calls and perform error checking.
        Providing a pseudo-API is the \texttt{tcp\_user\_*} suite of functions. These loosely follow the \textit{User Calls} defined in RFC 793~\cite{rfc793}, presenting the internal TCP state as a usable stream interface. Much of the error and sanity checking is performed within these functions, ensuring only legal operations are made by user process code.

        % Perform sufficient locking to prevent concurrent modification of the state whilst it's being read
        One important consideration with user-facing code is preventing concurrent modification.  The likelihood of a \gls{segment} arriving during the operation of a user call is quite high thus it is critical that sufficient locking is performed to prevent inconsistencies in the state allowing data to be lost or the connection state becoming invalid.

            \subsubsection{Send}
            % Calls tcp_send_data
            In the simplest form, \texttt{tcp\_user\_send} \glspl{segment} and the provided data and sends it in the fewest possible packets. All sent data is also pushed into the send retransmission buffer in the case that packets are lost and it is needed for retransmission.

            \texttt{tcp\_send\_data} is the function responsible for handling construction and transmission of data \glspl{segment}. Given a sequence number, as much data as is available will be added to the packet. Before data is copied into the payload section of the packet, header options are calculated and appended to the TCP header. Utilising the information from the socket about the lower layers and the size of TCP options, the \textit{maximum \gls{segment} size} is calculated to ensure a saturated packet, provided enough data is available in the send buffer.

            % Waits for space in send window
            Additionally, as to not overwhelm the receiver, a check is made before each \gls{segment} is sent to ensure there is sufficient space in the remote receive window. In low-latency connections with unscaled receive buffers, it is a common occurrence that the total size of unacknowledged packets reaches or exceeds the amount of available space the receiver has to buffer the packets. When the available space hits 0, sending is suspended indefinitely until an acknowledgement arrives, freeing up space in the send buffer. Non-blocking sockets return immediately, instead of waiting, with the error value \texttt{O\_NONBLOCK}.

            \subsubsection{Receive}
            % Copies the largest contiguous available byte range
            As \glspl{segment} arrive, they are added to the receive queue in sequence order greatly simplifying the \texttt{tcp\_user\_recv} operation. \glspl{segment} are processed from the front of the receive queue, sequentially. Each \gls{segment} is checked that it is contiguous to the last received byte and is then copied into the user receive buffer. Partial \glspl{segment} are accounted for by only removing wholly consumed \glspl{segment} from the queue and storing the read location as a starting byte on the next read call. When the -head of the receive queue is not contiguous to the previously read \gls{segment}, the function returns as all available data has been read.

            % Waits for incoming \glspl{segment}
            \texttt{tcp\_user\_recv} is also a blocking function call and will wait when there is no contiguous data to receive or the receive queue is empty, similarly to \texttt{tcp\_user\_send}. When a data \gls{segment} arrives, it is pushed into the receive queue then the recv call is woken so that it can attempt to read and return more data to the user.

        \todo{Maybe talk about some other tcp\_user\_* functions if there is time}

        \subsection{BSD Socket API}
        Integration with existing programs requires a common interface between the two; applications written for Unix systems use the BSD socket API\@.

        Provided is a wrapper around the internal subsystems to emulate the operation of the BSD API\@. Implementations of the following functions exist, providing access to just the TCP subsystem at current, with other calls defaulting to the standard system function calls.
        {\setlength\multicolsep{0pt}%
        \begin{center}
            \begin{minipage}{0.9\columnwidth}
                \begin{multicols}{2}
                    \begin{itemize}[noitemsep]
                        \item{\texttt{socket}}
                        \item{\texttt{bind}}
                        \item{\texttt{listen}}
                        \item{\texttt{accept}}
                        \item{\texttt{connect}}
                        \item{\texttt{send}}
                        \item{\texttt{recv}}
                        \item{\texttt{shutdown}}
                    \end{itemize}
                \end{multicols}
            \end{minipage}
        \end{center}
        \smallskip}

        % explain how BSD API functions are implemented
        Sockets and files alike are identified by their `file descriptor', a non-negative integer value, assigned by the kernel when the socket or file is opened. The \texttt{socket} function allocates socket resources and assigns a file descriptor for the user to refer to the socket.
        File descriptors are ``guaranteed to be the lowest unused file descriptor value'' when chosen by the kernel. There is no functionality to reserve arbitrary file descriptor values from the kernel so chosen values must not overlap those used by the kernel.

        Chosen arbitrarily, file descriptors for netstack start at \texttt{UINT16\_MAX} ($16,384$) and count upwards, to leave both enough space for both kernel-assigned and netstack-assigned values. This distinguished separation of file descriptor values ensures netstack and kernel files/sockets can be separated.
        File descriptors are used directly as array indices, offset from the start value, for the socket structures ensuring low-overhead socket lookup for each API call.

        % getsockopt, setsockopt, fcntl implemented but do nothing
        Implementations of various other functions which can perform operations on sockets such as \texttt{getsockopt}, \texttt{setsockopt} and \texttt{fcntl} are also handled but do nothing and return errors. These are provided for compatibility with some programs that utilise but do not rely on them, such as \texttt{curl}.

        % O_NONBLOCK isn't working
        Most of these functions currently only provide basic functionality and do not correctly handle extra modes of operation such as \texttt{O\_NONBLOCK}.

        Many applications that utilise this API leverage the power of \texttt{poll}, \texttt{epoll} and \texttt{select} for multiplexing I/O and socket operations within a single thread. Whilst handled, these functions do not operate as per the specification and simply return immediately.

    \section{Library Injection}
    Paired with \texttt{libnshook}, \texttt{libnetstack} can be made useful when injected into an existing program at runtime. Linux dynamic executables rely on \texttt{ld}, the \textit{loader} (not to be confused with \texttt{ld} the \textit{linker}) to locate and link together all of the required functions at runtime. One feature of the linker is the ability to preload libraries, overriding any symbols that would normally be loaded first, such as those in libc. libnetstack takes advantage of this feature to overload the default socket functions. % chktex 12

    \texttt{libnshook} is a small helper library that runs before the startup and after the end of the target executable. Its primary purpose is to initialise the network stack before \texttt{main} is called and to deallocate and clean up after it exits. It also handles memory faults on systems that support it to clean up resources of the crashed process.

    The two libraries are loaded at runtime through an environment variable, as so:
    \begin{center}
        \small
        \texttt{LD\_PRELOAD="libnshook.so:libnetstack.so"} % chktex 18
    \end{center}

    \section{Standalone Library}
    \todo{talk about netstack\_init() and netstack\_cleanup()} % chktex 36

        % netstack_init()
        % netstack_cleanup()
        %

    \section{Memory Management}
    One major advantage given to the programmer when using a simple language like C is very low level access to memory management, as a downside to the great flexibility the application must carefully track and deallocate every dynamic memory allocation to prevent memory leaks and use-after-free errors. This is especially important in long-lived applications such as those running in the background as system daemons as leaked memory will accumulate over time and eventually lock up the system. Shorter-lived processes aren't as concerned about this as the kernel will clean-up any unaccounted memory and file descriptors when the process exits.
        % struct intf

    There are numerous ways to manage memory in an application with one of the simplest, from the perspective of a programmer, is with a \emph{garbage collector} which polls for unreferenced memory and deallocates it, on a timer or when the application is idle. There are \emph{many} drawbacks to this approach however, primarily that there is no implementation of one in C.

        % refcounting
        \subsection{Reference Counting}
        Due to the concurrent nature of a networking stack, the memory-management approach had to take into account concurrent access across one or more threads. The simplest and most intuitive tool for performing this is known as a reference count (\textit{refcount}). Every time a pointer to some allocated memory is copied, an \emph{atomic} counter variable is incremented. When the memory is no longer required, a call is made to decrement the ref-counter. If the reference count hits 0, it is assumed that there are no remaining pointers within the program to the allocated memory so it is disposed of.

        Several of the data structures used rely on a refcount for deallocation, including but not limited to \texttt{struct inet\_sock} and \texttt{struct frame}. These structures are particularly reliant on concurrent access as they are both subject to indeterminable events from user applications and other network activity.

    % logging with macros for verbose logs
    \section{Logging}
    Leveraging the power of C preprocessor macros, the logging system can provide insightful and verbose output including the following details:

    {%
        \vspace{\parskip}
        \setlength\multicolsep{0pt}%
        \begin{multicols}{2}
            \begin{itemize}[noitemsep,leftmargin=2.2em]
                \item{timestamp}
                \item{thread name}
                \item{log level}
                \item{log message}
                \item{line number}
                \item{function name}
                \item{source file}
            \end{itemize}
        \end{multicols}
        \smallskip
    }

    Every log entry has an associated `level' or severity associated. When the logs are being outputted into a terminal, appropriate colours are applied to the entries, highlighting the severity. This makes spotting more severe errors much easier as they scroll past.

    Each source file defines a `log unit' string which prepends every log message with a hint of where the message came from, even in the case that the debug logging containing the line number and file extension is disabled.

    An example log entry:

    \vspace{\parskip}
    \begin{center}
        \begin{minipage}{0.86\columnwidth}
            \texttt{\footnotesize 11:08:50.489286 [netd] [\textcolor{gray}{TRACE}] \textcolor{gray}{(TCP) queuing \gls{segment} 27215: lib/tcp/output.c:233<tcp\_queue\_unacked>}}
        \end{minipage}
    \end{center}
    \vspace{\parskip}

    is generated with the code:
    \begin{center}
        \texttt{\footnotesize \textcolor{darkgray}{\textcolor{teal}{LOG}(LTRCE, \textcolor{ForestGreen}{"queuing \gls{segment} \textcolor{cyan}{\%u}"}, seq);}} % chktex 18 chktex 36
    \end{center}

    Internally the logger uses \texttt{printf} and its variants to format strings with varadic arguments, allowing quick construction of messages with various data types. In the example above the `log unit' of ``\texttt{(TCP)}'' is prepended to the message automatically based on the source file it was defined in. Additional macros have also been defined to perform the operation of \texttt{perror} and similar functions through the logging system to keep code clean and readable.

    \section{Issues}
        \subsection{Standards}
        % RFC 793 is incomplete and very vague
        Many of the semantics of edge-case events in TCP are poorly documented or absent from the original specification~\cite{rfc793}. Many of the behaviours that is expected from TCP implementations are simply not documented due to them evolving in-situ without proper protocol for evaluation. Whilst no two TCP implementations are created the same, many share features and semantics taken from the source code of previous implementations. It seems that the only truly `original' open-source implementation is the original \todo{why BSD here first} Berkeley Unix (BSD) stack from which most modern leading operating systems are based.

        Some later RFC documents contain updated details as well as some improvements and amendments on protocol semantics, such as those defined in RFC 1122 for TCP as well as other protocols that make up the Internet Suite.

        The standard procedure taken for attempting to overcome these omissions was either through trial and error or by referencing the well-tested Linux source code.

        \subsection{Threading \& Locking}
        % refcount
        % pthread_cond
        % arp request waiting on recv thread

        % BSD socket API design
        % non-blocking I/O (poll/select) :(

